// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FormField Should render with out crashing 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <FormField
    isDirty={false}
    isFocus={false}
    isValid={false}
    label="Full name"
    name="fullname"
    stateName="fullName"
    touched={false}
    value=""
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="input"
      >
        <Field
          stateName="fullName"
          value=""
        />
        <label
          htmlFor="fullname"
        >
          Full name
        </label>
      </div>,
      "className": "formField-input col col12",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Field
            stateName="fullName"
            value=""
          />,
          false,
          <label
            htmlFor="fullname"
          >
            Full name
          </label>,
        ],
        "className": "input",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "stateName": "fullName",
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Full name",
            "htmlFor": "fullname",
          },
          "ref": null,
          "rendered": "Full name",
          "type": "label",
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="input"
        >
          <Field
            stateName="fullName"
            value=""
          />
          <label
            htmlFor="fullname"
          >
            Full name
          </label>
        </div>,
        "className": "formField-input col col12",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Field
              stateName="fullName"
              value=""
            />,
            false,
            <label
              htmlFor="fullname"
            >
              Full name
            </label>,
          ],
          "className": "input",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "stateName": "fullName",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Full name",
              "htmlFor": "fullname",
            },
            "ref": null,
            "rendered": "Full name",
            "type": "label",
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": false,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
